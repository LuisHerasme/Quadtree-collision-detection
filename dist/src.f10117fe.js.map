{"version":3,"sources":["src/Render.ts","src/Vector.ts","src/Circle.ts","src/Body.ts","src/Entity.ts","src/Rect.ts","src/Quadtree.ts","src/index.ts"],"names":[],"mappings":";;;;;;AKIA,ALDA,ACFA,IIGA,ALDA,ACFA,IIGA,ELDA,ACFA;AIGA,ALDA,ACFA;AIGA,ALDA,ACFA,YIGA,ALDA,ACFA;AIQE,ALCA,ACLA,WIIA,ALCA,ACLA,IIIA,CAAY,CLCZ,ACLA,CDKY,ACLA,CAAZ,EAA2B,CAA3B,CDKA,CKDA,AJJwC,CDKO,CKDjB,CAA9B,EAAyC,CAAzC,CLCA,CKDkD,CLCgC;AKAhF,ALAU,ACLA,QDKA,ACLA,CIKL,AJLK,CIKV,GAAS,ALAC,CKAV,AJLU,IDKA,CCLA,CAAA,EAAA,CDKA,CAAA,EAAA;AKCV,ALDU,ACLA,MDKA,ACLA,CAAA,EIML,CAAL,AJNU,CDKA,ACLA,EIMD,CAAT,ALD0B,MAAM,CAAC,UAAvB;AEVd,AIAA,ADYI,ALF2C,ACLpB,AML3B,ILAA,AIAA,ACAA,KFYS,CCZT,EJAA,AKAA,CDAA,EJAA,AKAA,EFYI,GAAgB,QCZpB,ADYI,CCZJ,CJAA,AKAA,CLAA,AKAA,KDAA,CAAA,CJAA,AKAA,CLAA,AKAA,MDAA,CAAA,CAAA,EJAA,AKAA,CLAA,AKAA,CLAA,AKAA;AFaG;AHXH,AIAA,ANQiD,ACLpB,AMJ7B,ILCA,AIAA,ACDA,IPSiD,ACLpB,CAAA,CCH7B,EIAA,ACDA,EPSiD,ACLpB,CKH7B,ACDA,IPSiD,ACLpB,CAAA,EAAA,EDKoB,CAAA,EAAA,GMRjD,ACDA,CDCA,ACDA,ODCA,ACDA,CDCA,ACDA,UDCA,ACDA,CDCA,ACDA,CDCA,ACDA;ALCA,AGaE,ALL+C,ACLpB,EIU3B,IAAA,ALL+C,ACLpB,CIU3B,AJV2B,GAAA,CAAA,CDKoB,GAAiB,CKKhE,CAAA,ILLsE,CAAC,CKKvE,GAAA,OLL+C,GKKxC,OAAP,EAAwC;AHb1C,AIGA,ADWI,ALNgF,ACL1C,AMH1C,IDGA,ADWI,AEdJ,OFcW,CHdX,AIGA,ADWY,AEdZ,GAAA,MFcI,SEdJ,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;ALIE,AIDF,ADYI,IAAA,OHXF,AGWS,CAAC,IAAR,CHXF,AGWe,CHXH,IGWQ,IHXpB,EAA8B,EGWf,CAAc,CAA3B,EHXF,AGWgC,EHXY,GGWP,QAAL,CAAc,CAA5C,EAA+C,KAAK,CAApD,EAAuD,KAAK,CAA5D;AHVA,AIFJ,ADaI,ALbF,ACCE,AMHJ,IFeI,AEfJ,KLIS,AFFP,ACCO,CAAL,CIYO,CCbX,ADaY,CJZC,CAAT,AMHJ,GLII,AFFF,AOFF,CFeI,EHXgB,AFFQ,EAA1B,MEEE,IKJJ,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;ALKI,AIIF,ADOC,ALbD,ACCE,GIQF,MHPO,AFFP,ACCO,CAAL,CKKF,ELLW,CAAT,CCCA,GAAc,CIIhB,ANNA,CMMY,ENNS,EEEnB,EIIF,EAA0B,GNN1B,KMMA,EAA+C;AJH9C,AIGyB,ANLlB,ACCP,AMJH,IAAA,IDQ4B,CNLlB,COHV,GAAA,GDQ4B,GNLlB,EMKkB,CNLG,IMKH,ANLO,CMKP,ANLQ,COHpC,CDQ4B,ACR5B,CPG+B,EAArB,IOHV,CAAA,QAAA,CAAA,CAAA;ADQ4B,ADS1B,ALVE,EKUF,ICT0B,EDS1B,CAAA,ALVO,KMCmB,CNDxB,CAAY,CMCY,EAAA,ENDxB,EKUF,CAAI,ALVkB,IKUlB,CAAA,ALVF,SKUF,EAAI,GAAJ,EAAK;AHVL,AIC+C,ANA7C,ACFF,AMJF,ELKE,ADDA,EMJI,ILKJ,ADDA,CCCA,AGUA,ALTO,ACFP,MDEE,CAAY,EEDd,ADDA,CCCA,ADDA,AMJmB,GPMjB,ACFF,AMJsB,EFetB,CLTuB,ACFvB,AMJF,ELKE,GAAA,CFCE,ICFE,KCCK,CDDT,EAAkB,ECClB,EAAsB;AACpB,AGUA,ALTA,ACFA,AMJJ,IAAM,ILKI,CFCD,ACFA,CAAL,GIWO,CJXG,CDEV,GKSY,ALTE,ECFE,CAAC,CCCG,ADDpB,GCCuB,AKLA,CFehB,ALTe,CKSD,ALTE,CKSvB,AEf0B,EAA9B,GLK2B,CAAA,MFCT,CEDS,AFCc,CEDP,GAAP,CAAW,GFCpB,CAAd,CEDuC,QAAhB,EAA0B,KAAK,CAAC,QAAhC,CAAvB;AACA,AILF,ADeC,ALTC,ACFA,AMJJ,IAAM,CFaC,GHRG,CILR,ANMO,ACFA,CAAL,IAAU,ECCI,AILhB,ANME,GEDiB,AILA,ANMF,CCFC,CAAC,CAAjB,EKJF,ANMsB,KONO,CPMZ,CAAY,CONG,CLKC,CAAC,GAAf,EAAjB,EFCe,CAAuB,EON1C,EPMmB,CAAf;AMLF,ANMC,ACFA,AMHH,GNAE,CMAE,KDDF,MAAA,CCCc,EDDK,CCCF,CDDjB,ADYK,GEXP;ALII,AIJF,ACCF,IAAI,ILGI,CIJN,OJIc,CIJd,ECCiB,CLGC,AIJK,EAAvB,ACCoB,GLGG,EKHzB,ILGoB,GAAc,KAAK,CAAC,MAApC,EAA4C;AAC1C,AIFF,ADQG,ALJL,ACFA,AMHF,EPKE,ACFA,CIMA,CETE,IPKF,ACFA,CKFO,ANIP,ACFA,ICAW,EIFT,EJEE,CIFY,ANIhB,ACFA,CDEA,ACFA,CMHkB,EPKlB,ACFA,CMHqB,CDCnB,CNIF,ACFA,EMHF,QPKM,ACFA,MDEJ,ACFA,EDEkB,ACFA;ACCf,AIFD,ADWF,ALPE,ACFA,AMFJ,EFWE,EEXI,IFWJ,CCXO,ADWP,ALPO,ACFA,CAAL,IAAU,GKFV,ANIA,AOJe,CPID,EMJE,ALEA,AMFU,CNET,CDEjB,ACFA,CISF,ALPqB,CKOjB,AEX4B,IDA9B,ADWE,CAAA,ALPF,GOJ8B,CAAA,KFWhC,EAAI,AEXwB,EAA9B,CFWE,EAAK;ACVJ,ANIA,ACFC,AMDJ,GPCE,CODI,KFSJ,AJRO,CAAL,AMDQ,GAAG,CNCD,GMDK,GNCC,CAAC,CAAjB,EIQF,CETiB,CAAA,OAAJ,EAAf;ALCI,AGSA,AJRD,AMAH,GNHE,CMGI,OLDK,EGSA,GHTP,EGSY,GERO,GAAG,EFQf,CAAc,CAArB,AER0B,QAAA,CAAA,OAAJ,CAAW,EAAX,EAAe,IAAI,QAAA,CAAA,OAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAf,CAA1B;ALAG,AIDD,ADUC,ALND,AOFF,EDFE,ANIA,CEVA,EGcK,CEND,CAAC,CPEL,CAAA,CMJA,ACEF,CDFE,ACES,OPET,CAAA,CMJA,CAAA,INIA,GAAA,AOFF,EDFE,GAAA,ONIA,KMJA;AACE,ANGF,ACDA,EAAA,MKFQ,ANGR,ACDA,CAAA,IDCA,EMHe,CNGf,EMHkB,ALElB,CAAA,CIKK,ALJL,MMHkB,CAAA,ELElB,GAAA,EKFkB,CAAO,GAAP,CAAW,IAAI,CLEjC,OKFiC,CAAA,OAAJ,CAAW,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAA3B,EAA8B,CAA9B,CAAX,EAA6C,KAAK,MAAL,CAAY,QAAzD,CAAhB;AJCJ,AIAI,ALEA,QKFM,CJAV,EDEW,ICFX,AIAiB,ELEA,CKFG,ALEF,IAAP,CAAY,GKFH,CAAA,ALEO,KAAK,EKFZ,CAAO,ALEA,EAAhB,CKFS,CAAW,ALEQ,IKFJ,ALExB,CAAP,OKF+B,CAAA,OAAJ,CAAW,CAAX,EAAc,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAA9B,CAAX,EAA6C,KAAK,MAAL,CAAY,QAAzD,CAAhB;AJjBJ,AIkBI,ADKG,ALHH,ACAD,AMCD,CLrBF,EAAA,AGuBE,AJLA,GMGM,EDHE,ANEA,GAAG,GAAG,EMFE,ACGA,EPDE,CMFC,ANEA,AOCA,GPDL,EAAZ,AOCsB,GDHL,CAAA,ACGS,CAAC,MDHV,ACGK,CDHE,GAAP,CAAW,ACGU,EAAxC,EDHkC,QAAA,CAAA,OAAJ,CAAW,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAA3B,EAA8B,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAA9C,CAAX,EAA6D,KAAK,MAAL,CAAY,QAAzE,CAAjB;AAEA,ANCA,AOEF,MAAM,EPFE,CMDD,CNCG,GAAG,GAAG,CMDd,CAAc,CNCG,COEC,EDHlB,CACE,ACEmB,CPFC,GMAhB,ACEmB,OPFzB,CMAE,ACEuB,CDFV,ACEU,IDFN,GCEE,CACrB,EDHmB,CAAA,CCGf,CAAC,KDHU,CAAS,ACGxB,KDH6B,ACGb,MDHQ,ACGF,CDHc,ACGb,QDHC,CAAqB,CCExB,EAErB,CDJwB,EAAT,CCIX,CDJiD,ACIhD,KDJqD,CCI1D,KDJqD,ACIrC,CDJiD,CAAZ,GAAgB,CAAtD,ACIO,CAAC,CDJiD,KAAK,KCExD,CDFmD,ACE1E,CDFsF,CAAZ,GAAgB,CAAzE,CAAb,EAA0F,KAAK,QAA/F,CADF,EAEE,IAAI,QAAJ,CAAa,IAAI,MAAA,CAAA,OAAJ,CAAS,OAAT,EAAkB,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAAlC,EAAqC,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAArD,CAAb,EAAsE,KAAK,QAA3E,CAFF,EAGE,IAAI,QAAJ,CAAa,IAAI,MAAA,CAAA,OAAJ,CAAS,OAAT,EAAkB,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAAlC,EAAqC,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAArD,CAAb,EAAsE,KAAK,QAA3E,CAHF,EAIE,IAAI,QAAJ,CAAa,IAAI,MAAA,CAAA,OAAJ,CAAS,QAAT,EAAmB,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAAnC,EAAsC,KAAK,MAAL,CAAY,CAAZ,GAAgB,CAAtD,CAAb,EAAuE,KAAK,QAA5E,CAJF;AJDJ,AIQI,ADAF,ALLE,ACAF,AMMA,EFDA,AJLA,IIKA,AECM,CLTR,AGQE,CHRF,ADGE,CKKO,ANLA,ACAP,GMMY,GLTd,AKSiB,CDDb,ADAF,CAAA,CHRa,ADGb,CKKiB,ANLf,ACAF,AMMmB,GPNC,CMKlB,CJRJ,CFGI,EOMiB,CNNnB,AMMmB,CFDnB,EJLA,CIKA,GECe,CAAW,MFDb,CJLb,GIKA,AECe,EFDQ,AECe,cAAvB,CAAf;ADAC,ADAC,ALLA,ACAA,AMOF,GDfA,GCeI,EFFE,CLLC,ACAA,IIKI,AJLT,CIKI,ALLJ,ACAU,GIKG,CJLC,GIKG,CAAC,AEEA,CFFL,AJLM,EMOW,CFFR,AJLR,EAAd,CMOF,CFF4B,CAAC,AEI7B,CFJM,IACF,KAAK,CAAL,GAAS,KAAK,CAAd,GAAkB,IAAI,CAAC,CADrB,IAEF,KAAK,CAAL,GAAS,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,CAFrB,IAGF,KAAK,CAAL,GAAS,KAAK,CAAd,GAAkB,IAAI,CAAC,CAHzB,EAG4B;AFjChC,ACCA,ACiCM,ALRF,ACAD,GAFD,CExBF,ACCA,KJyBS,CIzBT,EDDA,CCCA,ACiCa,EFlCb,CH0BI,CKQE,ALRW,EAAb,SIzBJ,CAAA,CDDA,CAAA,KCCA,CAAA,CDDA,CAAA,MCCA,CAAA,CAAA,EDDA,CAAA,CAAA;AGgCE,ADGG,ALRD,AOQF,EDHA,ACGA,MAAM,CPRC,AOQA,CDHP,CAAA,MNLE,AOQF,CPRgB,AOQA,EDHhB,CAAA,INLE,AOQF,CPRwB,AOQA,KDHxB,GAAA,ENLwB,AOQA,KAAA,CPRA,COQK,CDHlB,ANLmB,KMK9B,EAAwB;AH9B1B,ACAA,AE+BI,ANLE,ACAJ,AMQE,ENRF,EE1BF,ACAA,EJ0BM,EMKI,ALLR,AMQM,CNRN,GE1BF,AH0BY,CMKG,ANLF,AOQA,CHlCb,AGkCc,CJlCd,CG+BkB,CF/BlB,CE+BI,ALLF,CDAI,ACAJ,CDAkB,ECAlB,AMQM,CAAe,EPRC,ACAtB,CDAuB,GOQjB,CJlCR,AIkCI,CJlCJ,CCAA,AGmCM,CHnCN,AJ0BM,ICAJ,CE1BF,CAAA,CCAA,CAAA,OGmCsB,CJnCtB,CAAA,CAAA,AImCyB,EJjCzB,CCFA,CAAA,CAAA,AGmCM;AFDF,ALPE,ACAF,AMSD,GAHD,GPNI,KKOK,AJPA,CDAC,CAAC,ECAE,CIOX,AJPY,GDAV,CAAc,CCAT,CAAW,GDAE,CAAC,CCAE,CAAhB,EAAmB,IDAxB,CCA6B,CDAA,ACAxB,CAAP,CDAE;AIzBN,AE8BI,ADGD,ALPE,ACAF,GIDD,AJDA,CGxBI,CJuBF,GMOI,GF9BK,EE8BA,CF9BG,CAAhB,IE8BQ,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AH7B3C,ACAA,AE8BM,ANJF,AOSF,IJnCI,ACAA,EDAE,AImCF,GJnCK,AH0BF,EMIE,EH9BX,EH0BI,CAAY,CMIV,CAAY,ENJd,EOSF,CHnCuB,CGmCD,CDLlB,CF9BsB,AE8BF,GF9B1B,OE8B0B,KAAA,EAAK;AH7B/B,ACCA,AE6BQ,ADGN,ALPC,ACAD,AMSE,EFFF,AJPA,CDXA,CGfE,ACCE,AGkCF,EJnCE,AEiCJ,CDhCO,ACgCP,CJPA,CE1BO,AF0BP,CE1BF,ACCY,AGkCF,CAAC,CJnCC,AG8BA,ECKR,CAAW,CFFb,CCHe,ADGf,CDhCkB,AE6BF,ALJhB,CGzBmB,AHyBnB,EMSE,ENTF,GKIU,ALJV,CKIyB,IDGzB,CDhCU,AE6BA,CF7BuB,AE6B3B,CDGN,CCHiC,CLJ5B,CAAL,CGzBU,CAAZ,AHyBgB,CKIwB,CAAC,GDGxB,CCHkB,CAAW,IDG5C,CCHiC,CDGJ;AD/B/B,AE6BO,ADGH,AJPA,AMSD,GHlCA,CAAC,GAAJ,AE2BM,CDKI,CJPD,CGzBC,AHyBN,GIOW,CJPD,CAAV,CIOc,IDhCR,ACgCY,CDhCZ,ACgCa,GAAL,CAAS,GDhC3B,GCgCiC,CAAC,QAAP,CAAgB,CAAhB,GAAoB,KAAK,QAAL,CAAc,CAAlC,GAAsC,KAAK,CAAL,GAAS,CAAxD,CAAd;AFjCJ,AEkCI,ALPF,ACAE,EDAF,CObF,CJdM,IEkCI,ALPR,CAAA,ACAO,CAAL,GIOW,CJPD,CE3BG,AF2Bb,CIOc,EFlCE,AH2BlB,CG3BF,AH2BE,CKOoB,CAAC,ELPrB,CKOgB,CAAS,CLPzB,KKO+B,CAAC,MLPhC,EKOyB,CAAgB,CAAhB,GAAoB,KAAK,QAAL,CAAc,CAAlC,GAAsC,KAAK,CAAL,GAAS,CAAxD,CAAd;ADhCJ,AE6BM,ADKF,ALRA,ACAD,GG1BA,AHuBD,CGvBE,ICkCI,ALRA,EI1BR,AE6BU,GF7BG,ACkCA,ECLE,CDKE,ALRD,CAAC,IKQK,CCLhB,ADKW,ECLO,CF7BX,ACkCa,CAAT,CLRT,EKQsB,GLRE,GKQI,CAAC,MAAjC,ALRA,EKQ0C,ALRF,OKQS,KAAP;AFlC9C,ACCE,AE6BM,ADKJ,ALRE,EI1BJ,EDDF,IAAA,AEmCQ,CDlCC,CAAC,CJ0BC,EI1BT,AE6BW,ADKA,CDlCC,ECkCG,KCLT,ADKc,ALRhB,CMGgB,ADKL,GAAS,CAAT,GCLT,ADKsB,CCLA,KDKM,CAAC,CDlCnC,GE6B4B,EDK1B,ECL0B,ADKgB,ECLZ,KDKmB,KAAP;AFnC9C,ACEE,AE6BQ,ADMN,ALTC,ACAH,AMfF,EHXE,AH0BA,GDFE,EObG,CFwBC,AJTN,CG1BO,AH0BP,CG1BQ,AE6BA,CNHC,EI1BT,ACmCW,AExBA,CHXC,AGWA,CDkBC,CAAC,CF7Bd,ACmCgB,CJThB,CAAA,CKGQ,CAAU,CDMG,AExBhB,CFwBW,AJThB,AMfqB,GDkBb,ADMiB,AJTzB,CKGQ,ADMN,EAA2B,AExBxB,GDkBG,AClBsB,EDkBR,EDMc,ECNV,ALH1B,CKG2B,CDME,OExB/B,EDkBwB,AClBuB,CDkBP,KAAhB,CAAd;AH/BV,ACGC,AE6BQ,ADML,ALTE,ACAF,CG7BJ,KJ6BM,EKSE,CCRA,CH9BR,CF6BW,CDAC,CKSC,ALTA,ECAE,CE7Bf,CEsCkB,CFtClB,CH6BM,ECAK,CISY,ALTD,ACAA,CISJ,GAAS,CAAvB,ALTuB,ACAA,CAAhB,CISoB,CJTD,KAAK,CISG,AJT3B,CDAW,ACAlB,CDAkC,EKSP,ELTT,CAAqB,IAArB,CAAhB;AG7Ba,AGiCZ,ADOH,ALVC,ACAF,AMIF,EJlCkB,CF4BjB,KIYQ,EAAE,CFxCO,CAAA,CEwCJ,GFxCI,EAAA,AEwCC,GAAG,GFxCJ,CAAA,CEwCS,CAAL,GAAS,CAA5B;ADnCJ,AE6BK,ADOD,ALVD,GAND,CIpBF,ICoCU,EDpCV,ACoCY,GAAG,KAAK,GAAG,KAAK,CAAL,GAAS,CAA5B;AFjCF,ACHF,ACsCI,AJXK,AMIT,ENJS,MAAA,AMID,CNJC,AMIA,EJ5BP,AEmCU,EAAE,AJXL,EExBP,CAAY,AEmCG,AJXf,EIWU,GAAU,EAAE,CFnCtB,CI4BF,CJ5BgC,AEmCL,AJXb,AMIY,CNJxB,CIWU,CJXa,CAAvB,EExBA,AEmCgC,AJXA,EExBY,GI4B9C,CFOwC,CAAC,AEPF,MFOL,GAAgB,CEPV,KFOgB,AEPjB,CFOkB,CEPZ,KFOzC;AFnCF,ACHF,AE8BI,ADSD,ALXO,ACAN,AMIF,EPJQ,AOIR,CFPA,KFtBA,AHyBQ,CAAA,CI5BV,CE8BW,ALFA,EEzBT,EFyBa,AMIA,CJ5BX,ACJJ,AE8BI,ACEY,CAAd,CHhCF,AJ4BU,CAAA,COIU,CNJT,CExBP,AFwBkB,CExBlB,AFwBmB,CDAb,ACAc,CAAF,AMIG,CAAC,CJ5BtB,AHwBF,CGxBE,AFwBwB,CAAjB,EAAoB,CExB3B,AFwB4B,CAAC,AMI/B,CJ5BQ,AFwBqB,GAAM,CAA1B,CDAT,ACAE,GExBA,EAAgB,MAAhB,KAAuB,IADzB;ACHmB,AE+BlB,ANFC,ACAD,AMID,EHjCmB,AGiCnB,CDfA,ALSO,MDEA,EI7BY,CAAA,GGiCN,CPJX,AOIY,CPJC,AOIf,CHjCmB,EAAA,AGiCD,KAAK,CHjCJ,AJ6BjB,AOIsB,CHjCL,EJ6BQ,IOI3B,CPJgC,UAA9B;AG5BF,AEuCF,ALVI,AOIH,CAHD,GJ9BE,KAAA,AEuCF,ALVS,CG7BP,GEuCF,GLVI,CAAa,CG7Bf,GAAmB,CAAnB,GH6BE,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,MAAM,CAAC,UAAnC,EAA+C,MAAM,CAAC,WAAtD;AGzBA,ACFF,AE8BA,AD3CF,ALyCG,ACAM,AMKT,CF9CA,CC2CE,ALFO,CIzCT,ALsCU,CGvBN,EAAE,EF0BG,AMKD,CJjCsC,AF4BrC,AMKA,CJ/BC,AG4BR,CF9BA,AE8BA,CLFO,GAAP,EG5BA,CAAY,EE8BZ,CAAA,GF9BA,CH4BW,AMKb,CHjC8B,AGiCJ,CNLxB,EAAuB,CKEvB,CLFA,EKEA,ALFiC,CG5BjC,CGiCF,CHjC8C,CGiCT,MDHzB,ICG0B,CDHpC,EAAqB,ECGc,EAAM;AHjCzC,AE+BE,ALFA,AMKF,MAAI,EHlCJ,AE+BQ,GLFC,AMKA,CAAC,CHlCV,AE+Ba,ELFA,AMKT,CHjCF,AE8Bc,ACGF,EDHZ,GLFO,CG5BP,AH4BkB,CG5BlB,CH4BoB,CAAC,CAAH,CG5BlB,CAAA,CH4ByB,EAAE,CG5B3B,AH4B4B,CAArB,AMKL,CHjCI,CH4ByB,EAAE,CAAC,CAAH,CMKK,EHjCpC,AH4BsC,CMKxC,CHjCkB,AH4BwB,CAAC,AMKA,CNLlC,CAAP,GG5BA,KAAuB,IADzB;ADGE,AEoCJ,ALTU,ACAP,AMKC,EPLM,CCFD,CEzBL,AIgCA,GFIJ,CAAA,ALTU,CG3BF,AH2BE,CG3BD,EAAL,GAAU,AEoCd,CEJgB,CJhCZ,CEoCW,ALTL,CAAA,AOKS,CAAC,EFIpB,ILTU,GAAR,GOKE,OPLc,EAAhB,EAA0B;AG1BxB,ACNF,AEkCE,ANDA,AOKD,IJhCC,ACNF,IEkCM,CH5BA,ACNN,AJiCO,CG3BA,ACNP,GEkCW,EFlCX,CJiCE,CAAa,CG3Bb,ACNc,CEkCV,CAAY,CH5BA,IAAI,CH2BpB,CIjCF,EJiC2B,GMCrB,CH5BgB,AG4BS,CH5BT,EH2BpB,EMCI,CAAJ,EH5BgB,AG4BqB,EH5BrC;AACA,ACHA,AE+BE,ANDF,ACAK,EAAA,EE3BL,ACHA,IH8BK,CE3BD,ACHA,AJ8BC,ACAA,CE3BA,ACHA,CE+BE,CLDF,GAAP,CDAE,CMCE,ANDW,CI9Bb,AE+Bc,GF/BE,AJ8BhB,CG3BA,EH2BoB,CG3BA,AG4BlB,ALDO,CKCa,CLDxB,EE3B0B,ACHxB,AH8BqB,EAAvB,EAAiC,GKCT,ANDtB,CG3BwB,CAAA,GG4BF,EAAK,EH5BP,EAApB;AACA,AG4BI,ANDJ,ACAA,AMIF,IJ/BE,EI+BE,GJ/BE,AH2BC,CG3BA,CF2BE,AMIA,CDHC,ACGA,EJ/BR,CF2BW,AMIT,CPJF,AOIY,CJ/BA,AG4BC,ANDA,CMCC,GH5BE,AF2BT,CE3BU,AF2BC,EE3BN,AF2BQ,CDApB,ACAqB,CDAC,ACAJ,CE3BI,EF2BG,EAAE,CE3BD,AG4BlB,ALDoB,CE3BD,AG4BE,ALDtB,AMIL,ENJ6B,CDAD,CCAG,CKCzB,ALD0B,CE3BtB,AG4BR,ALD2B,CDAG,AOIE,CDHC,ANDF,CG3BC,AF2BE,CMIxC,CNJ0C,CAAC,AMIA,CDHC,ANDZ,ACAvB,CE3BiC,AG4BG,ANDF,ACAzC,CE3ByC,GG4BJ,CAAW,EH5BhD,AH2BgD,EAAlB,CMCO,ANDrC,EAAuD,EAAvD,EAA2D,EAA3D;AI9BD,AEgCI,ANDJ,ACAA,AMIC,GPRM,ACED,CMML,GDLE,YCKa,GAAG,CAAC,eAAnB;AJ/BD,AIgCA;AHlCD,AE+BI,ANAI,ACDV,EG9BE,AJ+BQ,MI/BR,AJ+BQ,CI/BR,AJ+BQ,ACDV,CKCU,KAAK,ALDf,GG9BE,AJ+BQ,CI/BR,AJ+BQ,GMAJ,EAAkB,CF/BtB,GAAA,CJ+BQ,GAAR,MI/BO,MJ+BP,CI/BA,EAA0B,EAA1B,EAAoC;ADIpC,ACHE,AE+BI,ANAJ,ACrDJ,AMwDE,CNxDF,CEyBE,CFzBF,CDqDI,EG5BF,AI+BI,CJ/BJ,II+BS,CPHC,AOGA,CDHC,ANAA,EOGP,CJ/BJ,AI+Bc,CJ/Bd,AH4BE,CAAc,GMAV,CAAc,MH5BpB,CG4BM,ANAJ,CMA0B,ANAA,CG5B5B,EI+BI,EPH6B,KMAL,ACGU,CJ/B1B,AH4BV,EOGF,CDH4B,CCGe,CJ/B3C,AG4BgC,EH5BP;AACvB,ACHA,AE+BM,ANAN,AOGA,IPHA,AOGA,IJ/BM,CCHD,CE+BC,KAAK,ANAA,CG5BG,AG4BF,ANAA,GG5BK,CG4BX,ACGU,CDHA,ANAC,CI/BjB,CAAmB,AGkCA,CAAC,CHlCpB,CE+BM,CH5BW,AG4BX,ANAM,CG5BK,AH4BO,IMAlB,ANAM,CAAiB,CMAT,CH5BH,CAAO,CH4BZ,CMAY,ANAb,CG5BM,AG4BQ,CH5BG,AH4BQ,AOGpC,CPHW,CAAX,GG5BiC,GG4Bb,CAAe,IH5BlB,CG4BG,CH5BuB,AG4BrC,KH5B0C,CAAC,QAAhC,CAAjB;AACA,ACHA,AE+BK,ANAN,ACFH,AMKG,GPNO,ICCV,CE1BU,AF0BV,CG7BS,AE6BD,MH1BS,AF0BjB,GE1BoB,AF0BL,KE1BU,CF0BzB,IG7BI,CDGgB,GAAc,KAAK,CAAC,MAApB,GAA6B,QAAQ,CAAC,GAAT,EAA7C;AACA,ACHD,AE+BI,ACIN,CAXD,EH5BE,CGyCF,IJlCU,GAAG,GAAG,QAAA,CAAA,OAAA,CAAO,IAAP,CAAY,OAAO,GAAG,CAAtB,EAAyB,QAAQ,CAAC,UAAT,EAAzB,CAAZ;AACA,AG4BC,ANAH,EAAA,MAAA,CG5BO,AH4BP,QG5BE,CAAc,AH4BhB,CAAA,EG5BE,CAAkB,GAAlB,AH4BF,GAAA,UAAO,MAAP,EAAqB;AG3BnB,ACHF,AJ+BE,AOKJ,EHpCE,EDGE,ICHF,CDGO,ACHP,AGoCO,CJjCC,QAAN,ACHF,CDGiB,ACHjB,GDGE,CAAmB,OIiCvB,CJjCuB,CAAA,CIiCO,KHpC5B,CDGqB,CAAO,CCH5B,GDGqB,CAAY,CAAC,CAAb,EAAgB,ECHjB,CDGC,CAAnB,GCHF,EAAuD,MAAvD,EAA0F;ADIzF,ACJmB,AE+BlB,ANCD,AOKD,GJvCA,AHgCA,GOOI,EHrCgB,GE+BX,EF/BW,GE+BlB,EF/BkB,GGqCpB,EHrCoB,AGqCC,CHrCD,EAAA;AAAA,AEgCnB,ACMC,GDnBF,CCmBE,EHtCkB,IGsCZ,CHtCY,AGsCX,GHtC2B,KGsClC,CHtCwC,AGsCxB,CHtCyB,MGsCzC,CAAwB,GHtCN,OGsCM,MAAA,EAAM;AJhChC,ACNqD,AJiCvD,AOMM,EJjCJ,IAAA,CAAA,EH2BF,COMY,KPNZ,CG3BE,CAAA,OIiCwB,GAAG,MJjC3B,EIiC2B,CJjC3B,AIiC2B,OAAA,CAAO,EJjCjB,CIiCU,CAAW,KJjCtC,EAAkC,MIiCP,EAA0B,MAAM,CAAC,QAAjC,CAAvB;AJjCJ,AG6BA,AN5DF,AOiEM,CPjEN,CM4DE,CN5DF,KG+BE,EG6BA,ACKU,CDLV,EH7BA,GAAA,EIkCkB,EJlClB,AG6BA,CAAA,ACKqB,MDLrB,GAAA,KCKmC,CAAC,GAAf,CDLd,CCKH,KDLJ,EAAqB;AFnCkC,AEoCrD,QFpCqD,AEoCjD,KAAK,CFpC4C,KAAA,AEoCjD,CAAY,IFpCqC,CAAA,EAAA,OEoCjD,CAA2B,MAA3B,CAAJ,EAAwC;AH7BxC,ACPqD,AEqCnD,ANFN,AOMM,IJlCF,ECPqD,CJmCzD,CAAA,EMEU,ACIA,CJlCC,CAAC,ACP6C,GAAiB,AEqC3D,ANFf,GAAe,AOMG,CJlCd,CAAgB,CCP4D,AEqCtE,ACIW,CHzC4D,AEqC3D,CCIhB,CPNN,COMyB,GDJf,EH9BU,CG8BW,EFrC0B,GDOrC,AG8BgB,EH9BV,MG8BpB,EAAwC;AH7BxC,ACRsF,AEsCpF,ACGoB,UJjClB,GG8BG,EH9BC,CAAC,EAAL,CG8BF,CAAY,GH9BE,CG8Bd,CAAiB,IH9BG,CAAC,CG8BrB,CH9BF,EAA2B;AACzB,AG8BA,ACGA,YJjCI,AIiCE,GDHC,EH9BC,AIiCG,CJjCF,CG8BT,CCGc,MJjCV,CAAc,MAAd,CAAJ,AIiC4B,CAAC,CJjCF,SIiCb,EAAd;AJhCQ,ACRZ,AEsCG,ACGC,ODNF,CFnCI,AGyCF,GHzCK,EEsCA,ACGA,CJjCG,ACRC,AGyCH,EJjCE,EIiCR,CJjCQ,AIiCG,EHzCK,GDQR,ACRW,CDQX,ICRgB,MAA5B,SGyCwC,GJjC5B,AIiCgC,CJjChC,MAAA,CAAA,AIiCR;AJjCQ,AG+BR,ACGA,QAAA,IDHI,CAAC,CH/BI,AIkCH,CAAC,CJlCE,EG+BC,CH/BD,EAAA,CAAA,CAAA,AIkCT,CJlCQ,AIkCQ,CDHhB,EAAmB,ECGnB;AJlCQ,ACNZ,AEsCM,ACGH,QHzCC,KAAK,CDMQ,CGgCN,CHhCM,GAAA,EAAA,ACNb,CDMa,ACNC,CDMD,ACNb,CDMQ,AGgCN,EFtCgB,KAAK,MAAvB,GAAgC,CAApC,EAAuC;AACrC,AEsCG,ACGJ,KARD,MHjCO,QAAL,CAAc,CAAd,IAAmB,CAAC,mBAApB;ADMI,ACLJ,AGyCH,UJpCO,CCLC,IDKG,CAAC,GCLT,CAAc,CAAd,GDKI,ACLc,GDKE,ACLpB,EDKI;AACA,ACLL,AEqCG,ACIP,UJpCS,GGgCG,GHhCG,CAAC,IGgCT,CAAc,GHhCZ,CGgCF,CAAmB,CHhCC,EAAlB,OGgCiB,IAAA,EAAI;AAAI,iBAAA,IAAI,CAAC,MAAL,CAAY,MAAZ,CAAA;AH/BzB,ACJN,AEmCkD,ACMtD,MAAM,CAAC,CHzCC,CEmCA,CH/BE,GCJG,AGyCb,EJrCc,CAAC,AIqCC,KHzCR,CAAc,CAAd,GAAkB,CDIhB,CAAiB,AIqCX,GHzCe,GDIrB,GCJF,GAAgC,KAApC,EAA2C;ADKtC,ACJH,AEmCE,ACON,MAAM,KH1CG,GG0CK,CDPD,ECOI,EH1Cb,AEmCE,CFnCY,CAAd,IAAmB,AG0CN,CH1CO,AG0CP,OAAA,CAAO,GAAP,CAAW,OH1CxB,MG0Ca,EAA0B,iBAAiB,CAAC,QAA5C,CAAjB;AJrCK,ACJD,AEmCC,WFnCI,QAAL,CAAc,CAAd,GAAkB,KAAK,GAAG,GAA1B;ADKD,ACJA,AEmCA,ACMH,KJ9CE,CI8CE,QAAQ,CAAC,GAAT,KAAiB,EAArB,EAAyB;AJpCxB,AG+BA,ACMC,GJhDF,AG6BA,CCmBE,QAAQ,CAAC,SAAT;AHxCA,AGyCA,IAAA,IHzCI,IGyCI,CHzCC,AGyCA,IAAT,CAAc,EAAd,CHzCI,CAAc,CAAd,GAAkB,KAAK,MAAvB,GAAgC,CAApC,EAAuC;ADKzC,ACJI,AEoCJ,ACKE,EJrCF,AGgCA,ECKE,EJrCF,CAAA,GGgCA,CFpCS,AEoCT,KHhCA,CAAA,ECJI,CAAc,AEoClB,CFpCI,AEoCJ,ACKmB,CAAC,GHzCG,AEoCvB,CFpCwB,EEoCxB,ECKE,GAA6B,KDL1B,CHhCL,EIqCE,CJrCF,GCJI,AEoCJ,EAAsC,KHhCf,KAAvB,EAAkC;AAChC,ACJE,AEoCF,ACKA,IDLA,ACKA,OHzCO,AEoCA,CAAC,OFpCN,CAAc,CAAd,AGyCe,CAAC,CDLlB,CFpCoB,EEoCE,CFpCpB,GGyCF,CAA2B,GAA3B,CDLA,ACK+B,QAA/B;AJpCA,ACJC,AEoCD,ACKD,IDLC,IHhCM,EAAE,CGgCD,CAAC,CHhCW,QAAA,CAAA,AGgCnB,CAAmB,KAAK,CHhCL,CAAO,IAAP,AGgCA,CHhCY,AGgCA,KHhCK,GGgCjB,CAAqB,CHhCC,AGgCzC,EAA2C,EHhCP,GAAY,AGgCA,KHhCK,CAAC,AGgCX,CAAY,GHhCxB,CAAZ,EAA0C,EGgClB,CAAqB,CAAhE,EAAmE,EHhCN,CAAA,EGgCW,KHhCX,CAAO,AGgCD,CAAY,CAA/E,CHhC6D,CAAW,AGgCU,KAAK,GHhCf,CAAA,EGgCU,CAAY,CAA9F,GHhCwE,CAAO,GAAP,CAAW,QAAA,CAAA,OAAA,CAAO,IAAP,CAAY,EAAE,GAAG,KAAK,CAAC,IAAvB,EAA6B,QAAA,CAAA,OAAA,CAAO,GAAP,CAAW,KAAK,CAAC,QAAjB,EAA2B,KAAK,QAAhC,CAA7B,CAAX,EAAoF,QAAA,CAAA,OAAA,CAAO,IAAP,CAAY,KAAK,IAAjB,EAAuB,KAAK,QAA5B,CAApF,CAAX,EAAuI,QAAA,CAAA,OAAA,CAAO,IAAP,CAAY,KAAK,CAAC,IAAlB,EAAwB,KAAK,CAAC,QAA9B,CAAvI,CAA1C,CAAnB;AACA,AGgCA,QHhCM,CGgCD,CHhCG,GAAW,IGgCnB,CAAc,GHhCK,CAAA,GGgCnB,CAAsB,GHhCH,CAAO,IAAP,CAAY,CGgCT,IHhCc,AGgCd,EAAI,GHhCe,IAAL,GAAY,KAAK,CAAC,IAAvB,CAAZ,EAA0C,QAAA,CAAA,OAAA,CAAO,GAAP,CAAW,QAAA,CAAA,OAAA,CAAO,GAAP,CAAW,QAAA,CAAA,OAAA,CAAO,IAAP,CAAY,EAAE,GAAG,KAAK,IAAtB,EAA4B,QAAA,CAAA,OAAA,CAAO,GAAP,CAAW,KAAK,QAAhB,EAA0B,KAAK,CAAC,QAAhC,CAA5B,CAAX,EAAmF,QAAA,CAAA,OAAA,CAAO,IAAP,CAAY,KAAK,IAAjB,EAAuB,KAAK,QAA5B,CAAnF,CAAX,EAAsI,QAAA,CAAA,OAAA,CAAO,IAAP,CAAY,KAAK,CAAC,IAAlB,EAAwB,KAAK,CAAC,QAA9B,CAAtI,CAA1C,CAAnB;AACA,ACJA,AEmC8B,ACMhC,EAAA,MHzCM,GDIG,CAAC,CCJC,AEmCqB,CH/BvB,EAAK,CG+BsB,CH/B3B,AG+B4B,CH/BnC,CAJgC,CAKhC,ACLI,CAAc,AEmCY,CFnC1B,AEmCoC,ACMrB,GHzCG,IEmCQ,CFnCH,AEmCG,MFnC1B,GAAgC,MAApC,EAA4C;ADM5C,ACLE,AEkC8C,KAAhD,MFlCO,QAAL,CAAc,CAAd,IAAmB,CAAC,mBAApB;ADMH,ACLG,AEkCH,ACMD,GJ1CA,AGgCA,GCUI,KHxCK,OGwCT,CHxCI,CAAc,AGwCA,CHxCd,GAAkB,MAAM,GAAG,GAA3B;AACD,AGwCD,QAAM,mBAAmB,GAAG,IAAI,MAAA,CAAA,OAAJ,CAAS,IAAI,QAAA,CAAA,OAAJ,EAAT,EAAuB,MAAM,CAAC,UAA9B,EAA0C,MAAM,CAAC,WAAjD,CAA5B;AJlCF,ACJC,AEgCH,ACOI,EJnCF,CC5BA,GD4BA,CAAA,CImCQ,CDPV,GCOY,GAAa,CJnCvB,CAAA,AG4BF,ECO6B,UAAA,CJnC3B,AImC2B,GJnC3B,IImCuB,CAAa,KJnCtB,EAAd,EAAwB,UImCD,EAAkC,CAAlC,CAArB,CAFgB,CAGhB;AJnCA,AGpDJ,CAAA,EAAA,KHoDU,WAAW,GAAG,EAAE,GAAG,IAAzB;AACA,ACJF,AGuCE,EHvCF,EGuCE,IHvCF,CDIO,ACJP,CGuCQ,CAAC,MJnCP,CAAc,ACJhB,CAAA,AGuCE,CAAgB,CJnChB,CAAkB,GCJpB,EGuCE,CHvCF,AGuC0B,EJnCN,CAAA,OAAA,ACJb,AGuCmB,CJnCC,IAAP,CAAY,AImCN,CHvC1B,CGuCgC,CHvCQ,QDIpB,EAAyB,KAAK,QAA9B,CAAlB;AACA,ACJA,AE+BJ,ACOsC,IHtClC,GE+BJ,CAAA,CH3BS,ECJE,CAAC,CGsC0B,EDPtC,EH3BI,AIkCoC,CJlCtB,AG2BH,ACO0B,GJlCrC,ACJA,CDIkB,EIkCgB,CAAU,CDPhD,IH3BsB,CAAA,AIkCgB,CAAA,MJlChB,CAAO,IAAP,CAAY,WAAZ,EAAyB,KAAK,YAA9B,CAAlB;AACA,ACJA,AGqCmD,IHrCnD,CGqCA,IJjCK,ECJE,CAAC,KDIR,CAAc,IAAd,CA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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import Entity from \"./Entity\";\r\nimport Rect from \"./Rect\";\r\n\r\nclass Render {\r\n  context: CanvasRenderingContext2D;\r\n  entities: Array<Entity> = [];\r\n  clearColor: string = \"#4f9bd9\";\r\n  private lastUpdate: number = Date.now();\r\n  private canvas: HTMLCanvasElement;\r\n\r\n  constructor(width: number = window.innerWidth, height: number = window.innerHeight) {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.canvas = document.createElement('canvas');\r\n    this.context = this.canvas.getContext('2d');\r\n  }\r\n\r\n  add(entiti: Entity): void {\r\n    this.entities.push(entiti);\r\n  }\r\n\r\n  render(): void {\r\n    const now = Date.now()\r\n    const dt = now - this.lastUpdate;\r\n    this.lastUpdate = now;\r\n    this.clear();\r\n    this.drawFPS(dt);\r\n    this.entities.forEach(entiti => {\r\n      entiti.render(this.context);\r\n      entiti.update(this.entities, dt);\r\n    });\r\n    this.update(this);\r\n  }\r\n\r\n  init(): void {\r\n    if (document.readyState === \"complete\") {\r\n      this.loadCanvas();\r\n    } else {\r\n      window.onload = this.loadCanvas.bind(this);\r\n    }\r\n  }\r\n\r\n  private clear(): void {\r\n    this.context.fillStyle = this.clearColor;\r\n    this.context.fillRect(0, 0, window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  private drawFPS(dt: number): void {\r\n    this.context.fillStyle = \"white\";\r\n    this.context.font = \"30px Arial\";\r\n    this.context.fillText(`FPS: ${Math.round(1000 / dt)}`, 50, 50);\r\n  }\r\n\r\n  private loadCanvas(): void {\r\n    document.body.appendChild(this.canvas);\r\n    setInterval(this.render.bind(this), 0);\r\n  }\r\n\r\n  update(render: Render) {\r\n    return;\r\n  }\r\n}\r\n\r\nexport default Render;\r\n","\r\nclass Vector {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(vector: Vector) {\r\n    this.x += vector.x;\r\n    this.y += vector.y;\r\n  }\r\n\r\n  sub(vector: Vector) {\r\n    this.x -= vector.x;\r\n    this.y -= vector.y;\r\n  }\r\n\r\n  normalized(): Vector {\r\n    return Vector.mult(1 / this.mag(), this);\r\n  }\r\n\r\n  normalize(): void {\r\n    this.mult(1 / this.mag());\r\n  }\r\n\r\n  mag() {\r\n    return Math.hypot(this.x, this.y);\r\n  }\r\n\r\n  mult(s: number) {\r\n    this.x *= s;\r\n    this.y *= s;\r\n  }\r\n\r\n  copy(): Vector {\r\n    return new Vector(this.x, this.y);\r\n  }\r\n\r\n  static mult(s: number, v: Vector): Vector {\r\n    return new Vector(v.x * s, v.y * s);\r\n  }\r\n\r\n  static add(v1: Vector, v2: Vector): Vector {\r\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\r\n  }\r\n\r\n  static sub(v1: Vector, v2: Vector): Vector {\r\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\r\n  }\r\n}\r\n\r\nexport default Vector\r\n","import Vector from \"./Vector\";\r\n\r\nclass Circle {\r\n  radius: number;\r\n  position: Vector;\r\n\r\n  constructor(position: Vector, radius: number) {\r\n    this.position = position;\r\n    this.radius = radius;\r\n  }\r\n\r\n  collides(other: Circle): boolean {\r\n    const distanceVector = Vector.sub(this.position, other.position);\r\n    const distance = distanceVector.mag();\r\n    if (distance <= this.radius + other.radius) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default Circle;\r\n\r\n","import Vector from \"./Vector\";\r\nimport Entity from \"./Entity\";\r\nimport Circle from \"./Circle\";\r\n\r\n// COEFICIENTE_RESTITUCION\r\nconst CR = 0.99;\r\nlet id = 0; //!\r\nconst IMPULSE_MAG = 1;\r\n\r\nclass Body extends Circle {\r\n\r\n  velocity: Vector;\r\n  acceleration: Vector;\r\n  mass: number;\r\n  id: number; //!\r\n  friction: number = 1;\r\n\r\n  constructor(position: Vector, radius: number) {\r\n    super(position, radius);\r\n    id++; //!\r\n    this.id = id;\r\n    this.velocity = new Vector();\r\n    this.acceleration = new Vector();\r\n    this.mass = Math.PI * this.radius * this.radius;\r\n  }\r\n\r\n  fixPosition(other: Entity): void {\r\n    const distance = Vector.sub(this.position, other.position);\r\n    const overlap = this.radius + other.radius - distance.mag();\r\n    const fix = Vector.mult(overlap / 2, distance.normalized());\r\n    this.position.add(fix);\r\n    other.position.add(Vector.mult(-1, fix));\r\n  }\r\n\r\n  updateCollisions(Entitys: Entity[]) {\r\n    Entitys.forEach(Entity => {\r\n      if (this.id !== Entity.id) {\r\n        if (this.collides(Entity)) {\r\n          const [v1, v2] = this.velocityAfterCollision(Entity)\r\n          this.velocity = v1;\r\n          Entity.velocity = v2;\r\n          this.fixPosition(Entity);\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  velocityAfterCollision(other: Body): Vector[] {\r\n    //if (Vector.sub(this.position, other.position).mag() > 1) {\r\n    const v1: Vector = Vector.mult(1 / (this.mass + other.mass), Vector.add(Vector.add(Vector.mult(CR * other.mass, Vector.sub(other.velocity, this.velocity)), Vector.mult(this.mass, this.velocity)), Vector.mult(other.mass, other.velocity)))\r\n    const v2: Vector = Vector.mult(1 / (this.mass + other.mass), Vector.add(Vector.add(Vector.mult(CR * this.mass, Vector.sub(this.velocity, other.velocity)), Vector.mult(this.mass, this.velocity)), Vector.mult(other.mass, other.velocity)))\r\n    return [v1, v2];\r\n    //}\r\n    //return [this.position.copy(), other.position.copy()];\r\n  }\r\n\r\n  updatePhysics(dt: number): void {\r\n    const dtInSeconds = dt / 1000;\r\n    this.position.add(Vector.mult(dtInSeconds, this.velocity));\r\n    this.velocity.add(Vector.mult(dtInSeconds, this.acceleration));\r\n    this.velocity.mult(dtInSeconds * this.friction);\r\n    this.acceleration.mult(0);\r\n  }\r\n\r\n  addForce(force: Vector): void {\r\n    this.acceleration.add(Vector.mult(1 / this.mass, force));\r\n  }\r\n}\r\n\r\nexport default Body\r\n// this.addForce(Vector.mult(IMPULSE_MAG, dist));\r\n    // other.addForce(Vector.mult(IMPULSE_MAG, dist));","import Vector from \"./Vector\";\r\nimport Body from \"./Body\";\r\nimport srcImg from '../rock.png';\r\n\r\nconst FIX_POS = 2;\r\nconst VEL_AFTER_COLLISION = 0.5;\r\n\r\nconst img = document.createElement('img');\r\nimg.src = srcImg;\r\nimg.onload = () => {\r\n  console.log(\"IMG: LOADED CORRECTLY\")\r\n  console.log(img)\r\n}\r\n\r\nclass Entity extends Body {\r\n  color: string = \"#00FF00\";\r\n\r\n  constructor(radius: number, position: Vector) {\r\n    super(position, radius);\r\n    this.position = position;\r\n  }\r\n\r\n  update(Entitys: Entity[], dt: number): void {\r\n    // this.updateCollisions(Entitys);\r\n    this.updatePhysics(dt);\r\n    this.maintainInsideFrame();\r\n  }\r\n\r\n  maintainInsideFrame(width: number = window.innerWidth, height: number = window.innerHeight) {\r\n\r\n    const fix = (FIX_POS + this.radius);\r\n\r\n    if (this.position.x - this.radius < 0) {\r\n      this.velocity.x *= -VEL_AFTER_COLLISION;\r\n      this.position.x = fix;\r\n    }\r\n\r\n    if (this.position.x + this.radius > width) {\r\n      this.velocity.x *= -VEL_AFTER_COLLISION;\r\n      this.position.x = width - fix;\r\n    }\r\n\r\n    if (this.position.y - this.radius < 0) {\r\n      this.velocity.y *= -VEL_AFTER_COLLISION;\r\n      this.position.y = fix;\r\n    }\r\n\r\n    if (this.position.y + this.radius > height) {\r\n      this.velocity.y *= -VEL_AFTER_COLLISION;\r\n      this.position.y = height - fix;\r\n    }\r\n\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D) {\r\n    context.beginPath();\r\n    context.strokeStyle = this.color;\r\n    // context.fillStyle = \"#DDD\";// this.color;\r\n    context.drawImage(img, this.position.x - this.radius, this.position.y - this.radius, 2 * this.radius, 2 * this.radius);\r\n    // context.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\r\n\r\n    context.stroke();\r\n    // context.fill();\r\n  }\r\n}\r\n\r\nexport default Entity;\r\n","import Vector from './Vector';\r\nimport Entity from './Entity';\r\nimport Circle from './Circle';\r\n\r\nclass Rect {\r\n  position: Vector;\r\n  w: number;\r\n  h: number;\r\n\r\n  constructor(position: Vector, w: number, h: number) {\r\n    this.w = w;\r\n    this.h = h;\r\n    this.position = position;\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D) {\r\n    context.beginPath();\r\n    context.rect(this.position.x, this.position.y, this.w, this.h);\r\n    context.stroke();\r\n  }\r\n\r\n  get x() {\r\n    return this.position.x;\r\n  }\r\n\r\n  get y() {\r\n    return this.position.y;\r\n  }\r\n\r\n  collidesRect(rect: Rect) {\r\n    if (this.x < rect.x + rect.w &&\r\n      this.x + this.w > rect.x &&\r\n      this.y < rect.y + rect.h &&\r\n      this.y + this.h > rect.y) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  containsCircle(circle: Circle): boolean {\r\n    const distX = Math.abs(circle.position.x - this.position.x - this.w / 2)\r\n    const distY = Math.abs(circle.position.y - this.position.y - this.h / 2)\r\n\r\n    if (distX > (this.w / 2 + circle.radius)) return false\r\n    if (distY > (this.h / 2 + circle.radius)) return false\r\n\r\n    if (distX <= (this.w / 2)) return true;\r\n    if (distY <= (this.h / 2)) return true;\r\n\r\n    const dx = distX - this.w / 2;\r\n    const dy = distY - this.h / 2;\r\n\r\n    return (dx * dx + dy * dy <= (circle.radius * circle.radius));\r\n  }\r\n}\r\n\r\nexport default Rect;\r\n","import Rect from \"./Rect\";\r\nimport Entity from \"./Entity\";\r\nimport Vector from \"./Vector\";\r\nimport Circle from \"./Circle\";\r\n\r\nclass QuadTree {\r\n  border: Rect;\r\n  capacity: number;\r\n  divided: boolean = false;\r\n  childs: Entity[] = [];\r\n  subTrees: QuadTree[] = [];\r\n\r\n  constructor(border: Rect, capacity: number = 10) {\r\n    this.border = border;\r\n    this.capacity = capacity;\r\n  }\r\n\r\n  subdivide() {\r\n    const offsetX = Vector.add(new Vector(this.border.w / 2, 0), this.border.position);\r\n    const offsetY = Vector.add(new Vector(0, this.border.h / 2), this.border.position);\r\n    const offsetXY = Vector.add(new Vector(this.border.w / 2, this.border.h / 2), this.border.position);\r\n\r\n    this.subTrees.push(\r\n      new QuadTree(new Rect(this.border.position.copy(), this.border.w / 2, this.border.h / 2), this.capacity),\r\n      new QuadTree(new Rect(offsetX, this.border.w / 2, this.border.h / 2), this.capacity),\r\n      new QuadTree(new Rect(offsetY, this.border.w / 2, this.border.h / 2), this.capacity),\r\n      new QuadTree(new Rect(offsetXY, this.border.w / 2, this.border.h / 2), this.capacity)\r\n    )\r\n\r\n    this.divided = true;\r\n  }\r\n\r\n  queryRange(range: Circle): Entity[] {\r\n    const found = [];\r\n    if (this.border.containsCircle(range)) {\r\n      this.childs.forEach(child => {\r\n        if (range.collides(child)) found.push(child)\r\n      })\r\n      if (this.divided) {\r\n        this.subTrees.forEach(tree => {\r\n          found.push(...tree.queryRange(range))\r\n        })\r\n      }\r\n    }\r\n    return found;\r\n  }\r\n\r\n  queryRect(range: Rect): Entity[] {\r\n    const found = [];\r\n    if (this.border.collidesRect(range)) {\r\n      this.childs.forEach(child => {\r\n        if (range.containsCircle(child)) found.push(child)\r\n      })\r\n      if (this.divided) {\r\n        this.subTrees.forEach(tree => {\r\n          found.push(...tree.queryRect(range))\r\n        })\r\n      }\r\n    }\r\n    return found;\r\n  }\r\n\r\n\r\n  insert(Entity: Entity): boolean {\r\n    if (this.border.containsCircle(Entity)) {\r\n      if (this.childs.length < this.capacity) {\r\n        this.childs.push(Entity)\r\n        return true;\r\n      } else {\r\n        if (!this.divided) {\r\n          this.subdivide()\r\n        }\r\n        this.subTrees.find(tree => tree.insert(Entity));\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  draw(context: CanvasRenderingContext2D): void {\r\n    context.strokeStyle = \"#FFFFFF\";\r\n    context.strokeRect(this.border.position.x, this.border.position.y, this.border.w, this.border.h);\r\n    this.subTrees.forEach(tree => tree.draw(context));\r\n  }\r\n}\r\n\r\nexport default QuadTree\r\n","import Render from \"./Render\";\r\nimport Entity from \"./Entity\";\r\nimport Vector from \"./Vector\";\r\nimport QuadTree from \"./Quadtree\";\r\nimport Rect from \"./Rect\";\r\n\r\nconst NUMBER_OF_BALLS = 500;\r\nconst COLLISION_SEARCH_AREA = 30;\r\nconst ATTRACTION_FORCE_TO_MOUSE = 100000000000;\r\n\r\nlet quadtreeMode = true;\r\nlet attractionMouse = false;\r\nlet showQuadtreeMode = true;\r\n\r\nconst mousePosition: Vector = new Vector();\r\n\r\nconst render = new Render();\r\n\r\nconst entityFollowMouse = new Entity(50, new Vector(500, 500));\r\nrender.add(entityFollowMouse);\r\n\r\n// * Initialization\r\nwhile (render.entities.length < NUMBER_OF_BALLS) {\r\n  const entitySize = 10 + Math.random() * 10;\r\n\r\n  const entityPosition = new Vector(\r\n    Math.random() * window.innerWidth,\r\n    Math.random() * window.innerHeight\r\n  );\r\n\r\n  const entity = new Entity(entitySize, entityPosition);\r\n\r\n  let entityCanBeAdded: Boolean = true;\r\n\r\n  // An entity can be added if it doesn't collide with other entity.\r\n  render.entities.forEach(other => {\r\n    if (other.collides(entity))\r\n      entityCanBeAdded = false;\r\n  });\r\n\r\n  if (entityCanBeAdded) {\r\n    render.add(entity);\r\n  }\r\n}\r\n\r\ndocument.addEventListener(\"mousemove\", (event) => {\r\n  mousePosition.x = event.clientX;\r\n  mousePosition.y = event.clientY;\r\n});\r\n\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  if (event.key.toLocaleLowerCase() === \"q\") {\r\n    quadtreeMode = !quadtreeMode;\r\n  }\r\n  if (event.key.toLocaleLowerCase() === \"a\") {\r\n    attractionMouse = !attractionMouse;\r\n  }\r\n  if (event.key.toLocaleLowerCase() === \"s\") {\r\n    showQuadtreeMode = !showQuadtreeMode;\r\n  }\r\n\r\n})\r\n\r\n// Add force of attraction between the mouse and the entity.\r\nfunction addForceEntityToMouse(): void {\r\n  if (attractionMouse) {\r\n    render.entities.forEach(entity => {\r\n      const distanceVector = Vector.sub(mousePosition, entity.position);\r\n      const distance = distanceVector.mag();\r\n      if (distance > 50) {  // Does not add forces if the object is too near of the mouse.\r\n        const force = distanceVector.normalized();\r\n        force.mult(ATTRACTION_FORCE_TO_MOUSE / (distance));\r\n        entity.addForce(force);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nrender.update = () => {\r\n\r\n  const distance = Vector.sub(mousePosition, entityFollowMouse.position);\r\n  if (distance.mag() > 10) {\r\n    distance.normalize();\r\n    distance.mult(10);\r\n    entityFollowMouse.velocity = distance;\r\n    entityFollowMouse.position.add(distance);\r\n  }\r\n\r\n  addForceEntityToMouse();\r\n  if (quadtreeMode) {\r\n    const screenSizeRectangle = new Rect(new Vector(), window.innerWidth, window.innerHeight);\r\n    const qt: QuadTree = new QuadTree(screenSizeRectangle, 5);\r\n    // Inset all entities in quadtree.\r\n    render.entities.forEach(entity => qt.insert(entity));\r\n\r\n    render.entities.forEach(entity => {\r\n      // Rectangle around the entity.\r\n      const query = generateRectAroundVector(entity.position);\r\n      // Search all entities inside the rectangle.\r\n      const entitiesInsideRect = qt.queryRect(query);\r\n      // Check collision with all entities inside the rectangle.\r\n      entity.updateCollisions(entitiesInsideRect);\r\n    });\r\n    if (showQuadtreeMode) {\r\n      qt.draw(render.context);\r\n    }\r\n  }\r\n  else {\r\n    render.entities.forEach(entity => {\r\n      entity.updateCollisions(render.entities);\r\n    });\r\n  }\r\n\r\n  render.context.fillStyle = \"white\";\r\n  render.context.font = \"30px Arial\";\r\n  render.context.fillText(`Quadtree mode ${quadtreeMode ? 'ON' : 'OFF'}.`, 50, 100);\r\n  render.context.fillText(`show quadtree mode ${showQuadtreeMode ? 'ON' : 'OFF'}.`, 50, 150);\r\n  render.context.fillText(`Attraction mouse mode ${attractionMouse ? 'ON' : 'OFF'}.`, 50, 200);\r\n  render.context.fillText(`NUMBER_OF_BALLS ${NUMBER_OF_BALLS}.`, 50, 250);\r\n}\r\n\r\nrender.init()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction generateRectAroundVector(v: Vector): Rect {\r\n  return new Rect(Vector.sub(v,\r\n    new Vector(COLLISION_SEARCH_AREA / 2, COLLISION_SEARCH_AREA / 2)),\r\n    COLLISION_SEARCH_AREA,\r\n    COLLISION_SEARCH_AREA);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //    const result = render.entities;\r\n    // result.forEach(r => {\r\n    //   const distance = Vector.sub(r.position, entity.position);\r\n    //   const d = distance.mag();\r\n    //   distance.normalize();\r\n    //   distance.mult((entity.mass * r.mass) / (d * d));\r\n    //   distance.mult(0.005);\r\n    //   if (!isNaN(distance.x) || !isNaN(distance.x)) {\r\n    //     entity.addForce(distance);\r\n    //   }\r\n    // })"]}